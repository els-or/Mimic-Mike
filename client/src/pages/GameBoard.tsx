import { useMutation } from "@apollo/client";
import { CREATE_GAME_SESSION, UPDATE_USER } from "../utils/mutations";
import { useEffect, useState } from "react";
import { boardOneButtons } from "../utils/buttonArray";
import { getRandomInt, playSound } from "../utils/gameLogicHelpers";
import GameOverScreen from "../components/Game/GameOverScreen";
import "../styles/GameBoard.css";

const GameBoard = () => {
  const [createGameSession, { loading, error }] =
    useMutation(CREATE_GAME_SESSION);

  // State variables
  const [gameSession, setGameSession] = useState<{
    _id: string;
    player: { _id: string };
    score: number;
  } | null>(null);
  // Tracks the player's current score in the game
  const [score, setScore] = useState(0);

  // Controls whether the game has been started
  const [gameStarted, setGameStarted] = useState(false);

  // Indicates if the game has ended
  const [gameOver, setGameOver] = useState(false);

  // Stores the sequence of buttons generated by the computer
  const [gameSequence, setGameSequence] = useState<string[]>([]);

  // Stores the sequence of buttons pressed by the user
  const [userSequence, setUserSequence] = useState<string[]>([]);

  // Keeps track of the current round number
  const [round, setRound] = useState<number>(0);

  // Controls whether user input is allowed
  const [inputLocked, setInputLocked] = useState<boolean>(false);

  // Indicates if the game is in a loading state
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // Tracks which button is currently activated/highlighted
  const [activeButton, setActiveButton] = useState<string | null>(null);

  // Create game session
  const handleCreateSession = async () => {
    try {
      const { data } = await createGameSession({ variables: { score: 0 } });
      setGameSession(data.createGameSession);
      setScore(data.createGameSession.score);
    } catch (error) {
      console.error("Error creating game session:", error);
    }
  };

  // Game start/reset
  const startOrResetGame = () => {
    setIsLoading(true);
    setGameOver(false);
    setGameSequence([]);
    setUserSequence([]);
    setScore(0);
    setRound(0);
    setInputLocked(false);

    setTimeout(() => {
      setIsLoading(false);
      setGameStarted(true);
    }, 1000);
  };

  // Initialize game when ready
  useEffect(() => {
    if (!isLoading && gameStarted) {
      playSequence();
    }
  }, [isLoading, gameStarted]);

  // Game over handlers
  const handlePlayAgain = () => {
    startOrResetGame();
  };

  const handleQuitGame = () => {
    window.location.assign("/");
  };

  // CPU game sequence logic
  const playSequence = () => {
    const randomInt = getRandomInt(1, 4);
    const nextButton = boardOneButtons.find((b) => b.id === randomInt);
    if (!nextButton) {
      console.error("Invalid button");
      return;
    }

    const newSequence = [...gameSequence, nextButton.id.toString()];
    setGameSequence(newSequence);
    setInputLocked(true);

    newSequence.forEach((buttonId, index) => {
      const button = boardOneButtons.find((b) => b.id.toString() === buttonId);
      if (!button) return;

      const onTime = 1000 * index;

      // Light up the button and play the sound
      setTimeout(() => {
        playSound(button.sound, 0.25); // 25% volume
        setActiveButton(button.text);
      }, onTime);

      // Turn off the button
      setTimeout(() => {
        setActiveButton(null);
      }, onTime + 700);
    });

    // Re-enable player input after sequence
    const totalTime = newSequence.length * 1000;
    setTimeout(() => {
      setInputLocked(false);
      setUserSequence([]);
      setRound((prev) => prev + 1);
    }, totalTime + 100);
  };

  // Player input handler
  const handlePlayerInput = (buttonId: string) => {
    if (inputLocked || userSequence.length >= gameSequence.length) {
      return;
    }

    const button = boardOneButtons.find((b) => b.id.toString() === buttonId);
    if (!button) {
      console.error("Button not found");
      return;
    }

    const updatedUserSequence = [...userSequence, button.id.toString()];
    setUserSequence(updatedUserSequence);

    const currentIndex = updatedUserSequence.length - 1;
    const isCorrect =
      updatedUserSequence[currentIndex] === gameSequence[currentIndex];

    // Show feedback
    playSound(button.sound, 0.25); // 25% volume
    setActiveButton(button.text);
    setTimeout(() => setActiveButton(null), 400);

    if (!isCorrect) {
      setInputLocked(true);
      setTimeout(() => {
        setGameOver(true);
      }, 1000);
      return;
    }

    // If round complete
    if (updatedUserSequence.length === gameSequence.length) {
      setTimeout(() => {
        setScore((prev) => prev + 1);
        setUserSequence([]);
        playSequence();
      }, 1000);
    }
  };

  return (
    <>
      <div className="mimic-mike-home"></div>
      <div className="content-wrapper">
        {gameOver && (
          <GameOverScreen
            score={score}
            onPlayAgain={handlePlayAgain}
            onQuit={handleQuitGame}
          />
        )}

        {gameStarted ? (
          <div className="game-container">
            <div className="game-header">
              <h1>Round {round}</h1>
              <p className="game-score">Score: {score}</p>
            </div>

            <div className="simon-container">
              {boardOneButtons.map((button) => (
                <div
                  key={button.id}
                  className={`simon-button simon-${button.text.toLowerCase()} ${
                    activeButton === button.text ? "active" : ""
                  }`}
                  onClick={() => handlePlayerInput(button.id.toString())}
                  style={{
                    pointerEvents: inputLocked ? "none" : "auto",
                  }}
                >
                  <div className="button-inner">{button.text}</div>
                </div>
              ))}
              <div className="simon-center">
                <div className="round-display">{round}</div>
              </div>
            </div>

            <div className="game-controls">
              <button className="secondary-button" onClick={handleQuitGame}>
                Quit Game
              </button>
            </div>
          </div>
        ) : (
          <div className="home-container">
            <div className="title-animation">
              <h1>Mimic Mike</h1>
              <p className="tagline">Test your memory skills!</p>
            </div>

            <div className="game-info">
              <p>
                Watch and listen to the pattern sequence, then repeat it back in
                the correct order.
              </p>
              <p>How many rounds can you go?</p>
            </div>

            {!gameSession ? (
              <button
                className="play-button pulse"
                onClick={handleCreateSession}
              >
                Create Game Session
              </button>
            ) : (
              <button className="play-button pulse" onClick={startOrResetGame}>
                Start Game
              </button>
            )}

            {loading && <div className="loading-state">Loading...</div>}
            {error && <div className="error-state">Error: {error.message}</div>}
          </div>
        )}
      </div>
    </>
  );
};

export default GameBoard;
